import { AdapterBlueprint } from '@reown/appkit/adapters';
import type { Commitment, ConnectionConfig } from '@solana/web3.js';
import { type AppKit, type AppKitOptions } from '@reown/appkit';
import type { BaseWalletAdapter } from '@solana/wallet-adapter-base';
export interface AdapterOptions {
    connectionSettings?: Commitment | ConnectionConfig;
    wallets?: BaseWalletAdapter[];
}
export declare class SolanaAdapter extends AdapterBlueprint {
    private connectionSettings;
    private w3mFrameProvider?;
    private authProvider?;
    private authSession?;
    adapterType: string;
    wallets?: BaseWalletAdapter[];
    constructor(options?: AdapterOptions);
    syncConnectors(options: AppKitOptions, appKit: AppKit): void;
    getEnsAddress(params: AdapterBlueprint.GetEnsAddressParams): Promise<AdapterBlueprint.GetEnsAddressResult>;
    writeContract(): Promise<AdapterBlueprint.WriteContractResult>;
    getCapabilities(): Promise<unknown>;
    grantPermissions(): Promise<unknown>;
    revokePermissions(): Promise<`0x${string}`>;
    signMessage(params: AdapterBlueprint.SignMessageParams): Promise<AdapterBlueprint.SignMessageResult>;
    estimateGas(params: AdapterBlueprint.EstimateGasTransactionArgs): Promise<AdapterBlueprint.EstimateGasTransactionResult>;
    sendTransaction(params: AdapterBlueprint.SendTransactionParams): Promise<AdapterBlueprint.SendTransactionResult>;
    parseUnits(): bigint;
    formatUnits(): string;
    connect(params: AdapterBlueprint.ConnectParams): Promise<AdapterBlueprint.ConnectResult>;
    getBalance(params: AdapterBlueprint.GetBalanceParams): Promise<AdapterBlueprint.GetBalanceResult>;
    switchNetwork(params: AdapterBlueprint.SwitchNetworkParams): Promise<void>;
    private listenProviderEvents;
    private providerHandlers;
    private removeProviderListeners;
    connectWalletConnect(onUri: (uri: string) => void): Promise<void>;
    disconnect(params: AdapterBlueprint.DisconnectParams): Promise<void>;
    getProfile(): Promise<AdapterBlueprint.GetProfileResult>;
    syncConnection(params: AdapterBlueprint.SyncConnectionParams): Promise<AdapterBlueprint.ConnectResult>;
    getWalletConnectProvider(params: AdapterBlueprint.GetWalletConnectProviderParams): AdapterBlueprint.GetWalletConnectProviderResult;
}
